const crypto = require("crypto");

// const { publicKey, privateKey } = crypto.generateKeyPairSync("rsa", {
//   modulusLength: 2048,
//   publicKeyEncoding: {
//     type: "pkcs1",
//     format: "pem"
//   },
//   privateKeyEncoding: {
//     type: "pkcs1",
//     format: "pem"
//   }
// });

// console.log(publicKey);
// console.log(Buffer.from(publicKey).toString("hex"));
// console.log(privateKey);
// console.log(Buffer.from(privateKey).toString("hex"));

// -----BEGIN RSA PUBLIC KEY-----
// MIIBCgKCAQEAw4Y3g5DyTnXh3QxrOvxq7U1HdGR6/5bg2fwr0D5LUyxS/XA8vEG7
// rkZz9saxFxr/1/03Pfa5HsUAkkywzuu/Pwop4ql0AyEh+8xVTI0NYjFqdTi/xLd5
// TUiHrvWIyDKJx92Ete2X0y8SE4j5rFUtsv62f7a8FfRJ2W/kd2DBRkIvwZWD8J6r
// lHXGBIBV6r8f+kxcyARKriZOInrDFHmnT1led187Mj8hVe+0tfZZjoetO/wPfugu
// CAj86FSzQsaWqDPbR5Fu7Xc5PpIMYPyNwm+w0+v0DBMUslAtA+Oc2PPf+AaNUIoT
// /BUf79+MZegcxffWPrPsB8d1j5tf2X/+lQIDAQAB
// -----END RSA PUBLIC KEY-----

// 2d2d2d2d2d424547494e20525341205055424c4943204b45592d2d2d2d2d0a4d49494243674b43415145417734593367354479546e5868335178724f76787137553148644752362f356267326677723044354c557978532f584138764547370a726b5a7a397361784678722f312f303350666135487355416b6b79777a75752f50776f7034716c30417945682b3878565449304e596a46716454692f784c64350a545569487276574979444b4a78393245746532583079385345346a357246557473763632663761384666524a32572f6b64324442526b4976775a5744384a36720a6c48584742494256367238662b6b78637941524b72695a4f496e724446486d6e54316c65643138374d6a386856652b3074665a5a6a6f65744f2f7750667567750a43416a383646537a517361577144506252354675375863355070494d5950794e776d2b77302b763044424d55736c4174412b4f63325050662b41614e55496f540a2f42556637392b4d5a6567637866665750725073423864316a35746632582f2b6c514944415141420a2d2d2d2d2d454e4420525341205055424c4943204b45592d2d2d2d2d0a

// -----BEGIN RSA PRIVATE KEY-----
// MIIEpAIBAAKCAQEAw4Y3g5DyTnXh3QxrOvxq7U1HdGR6/5bg2fwr0D5LUyxS/XA8
// vEG7rkZz9saxFxr/1/03Pfa5HsUAkkywzuu/Pwop4ql0AyEh+8xVTI0NYjFqdTi/
// xLd5TUiHrvWIyDKJx92Ete2X0y8SE4j5rFUtsv62f7a8FfRJ2W/kd2DBRkIvwZWD
// 8J6rlHXGBIBV6r8f+kxcyARKriZOInrDFHmnT1led187Mj8hVe+0tfZZjoetO/wP
// fuguCAj86FSzQsaWqDPbR5Fu7Xc5PpIMYPyNwm+w0+v0DBMUslAtA+Oc2PPf+AaN
// UIoT/BUf79+MZegcxffWPrPsB8d1j5tf2X/+lQIDAQABAoIBAQCrXJB+8KRM+6fu
// shmw4tVcEWTUr9PU+gkrQ4Wqx04BIVHC6YFxhTLWNM0htVYz5+ffBwBJgFkSjJpJ
// nok/cQJ2X5QCIX2Z2IoOQzFnHCBktOaWwhvgbuUTRMQWJP+yZgi3cIAFaqyr3A89
// q8kWrriUrgSIvkDuBOJMfXKA5f2+cmy56ojVGAxdZXQ3ryhjuiwqC8r74jsuzl3G
// 6rrXOfb5XCaysLQRtbMMGbkYPw0rlb7DV41FmEcuHaM9B6lNhP438DJNLMyOI3jj
// cPmfKLyRfYfBopxO4EUq0JDeGI6q5c0Jzh6pW5ZqFloKdV0cgIAT0ccU29Q6Xy9U
// vTJPvVapAoGBAPvXYoXJ71m3txGQzd6nPEDPxwn26fW4YeBYI9Qzo2DaLTRmbxFz
// rgA8VehW6McGUlZ6xe7ihEEC91m5Mzrs+W9QPnPXq0HVs/PR9iJABuneXcHS6vQU
// aYTfKqX/kxImeZgIJ5dXod4aD72GR0iTCOSyHn7bsBfQ1MWb06ygVLu7AoGBAMbA
// wvDjiDUt/NGvRZu3xgMdeJAjKxOSTq6JIbfFud/cbUNA1ePm1RFwZsdFzJML1jLa
// dpls88agKMNcSzQn6397DQ+FgrTbbteuMIzTY38+nhvl+aMfNgTVYFNG/BQgSWEa
// VPY01aKChbofSmmOnpcbmtLgwE9OfgyqrKHz6wHvAoGASNq7Prb3Tf4OsL8yPzoj
// /R/elaxfbF1Fu0/kNYwmtGsJbsI/WU4cxSavN4KE3qaehTQJNJ1E40XHZqZkAqTx
// V9lf58U5XtdCssNHsArTtS5F8z9gBvIswGqK/PCdjD+jJ28cfPS19/mUGiDRWFZo
// 2TgKCGrnW0xncS8uIh9Tw+cCgYEAqWP6APH60VAba95Ulg1/ToJckYPXn7uPIYOw
// X/69lwQ3fx0P7kd6in1gqy9a1mw9J2Q3tjU8Yql3dGEBmzb2p9SI4hSovFlUU6+a
// ozs6TmVgvWg4ZYUhNedhTDhwePq3b3HQvXF0LifNrz4h3mr10NVvE5EHdc/w7/y6
// WuEXBrMCgYB+EPvzYXC1Oq+j6xDFpNY4U2PyHr3GbLZaxpO/eXRPNg/5DEysSVUV
// iMvv6FoMOTJrTA0sZ5WmLz3blMk8cWylfAzdjE1TbZ0LDX5xuqFEcb4nbWmeWfeO
// 0XNnHDxKg6n76eGI6fFKrNqLbhDX4XmBEiEAfdEKJuwTTdn3XJ+Ijg==
// -----END RSA PRIVATE KEY-----
// 2d2d2d2d2d424547494e205253412050524956415445204b45592d2d2d2d2d0a4d4949457041494241414b43415145417734593367354479546e5868335178724f76787137553148644752362f356267326677723044354c557978532f5841380a76454737726b5a7a397361784678722f312f303350666135487355416b6b79777a75752f50776f7034716c30417945682b3878565449304e596a46716454692f0a784c6435545569487276574979444b4a78393245746532583079385345346a357246557473763632663761384666524a32572f6b64324442526b4976775a57440a384a36726c48584742494256367238662b6b78637941524b72695a4f496e724446486d6e54316c65643138374d6a386856652b3074665a5a6a6f65744f2f77500a6675677543416a383646537a517361577144506252354675375863355070494d5950794e776d2b77302b763044424d55736c4174412b4f63325050662b41614e0a55496f542f42556637392b4d5a6567637866665750725073423864316a35746632582f2b6c51494441514142416f494241514372584a422b384b524d2b3666750a73686d773474566345575455723950552b676b725134577178303442495648433659467868544c574e4d30687456597a352b66664277424a67466b536a4a704a0a6e6f6b2f63514a32583551434958325a32496f4f517a466e4843426b744f61577768766762755554524d51574a502b795a6769336349414661717972334138390a71386b577272695572675349766b4475424f4a4d66584b413566322b636d7935366f6a56474178645a5851337279686a7569777143387237346a73757a6c33470a367272584f66623558436179734c515274624d4d47626b59507730726c623744563431466d45637548614d3942366c4e6850343338444a4e4c4d794f49336a6a0a63506d664b4c7952665966426f70784f34455571304a4465474936713563304a7a68367057355a71466c6f4b64563063674941543063635532395136587939550a76544a5076566170416f474241507658596f584a37316d33747847517a64366e5045445078776e3236665734596542594939517a6f3244614c54526d6278467a0a7267413856656857364d6347556c5a36786537696845454339316d354d7a72732b573951506e505871304856732f505239694a4142756e6558634853367651550a615954664b71582f6b78496d655a67494a3564586f6434614437324752306954434f5379486e376273426651314d576230367967564c7537416f4742414d62410a7776446a694455742f4e4776525a753378674d64654a416a4b784f535471364a4962664675642f6362554e413165506d315246775a7364467a4a4d4c316a4c610a64706c73383861674b4d4e63537a516e3633393744512b4667725462627465754d497a545933382b6e68766c2b614d664e67545659464e472f425167535745610a5650593031614b4368626f66536d6d4f6e7063626d744c677745394f66677971724b487a36774876416f4741534e7137507262335466344f734c3879507a6f6a0a2f522f656c6178666246314675302f6b4e59776d7447734a6273492f57553463785361764e344b45337161656854514a4e4a3145343058485a715a6b417154780a56396c66353855355874644373734e487341725474533546387a3967427649737747714b2f5043646a442b6a4a32386366505331392f6d554769445257465a6f0a3254674b4347726e5730786e6353387549683954772b634367594541715750364150483630564162613935556c67312f546f4a636b5950586e37755049594f770a582f36396c77513366783050376b6436696e316771793961316d77394a325133746a553859716c33644745426d7a6232703953493468536f76466c5555362b610a6f7a7336546d5667765767345a5955684e656468544468776550713362334851765846304c69664e727a3468336d7231304e56764535454864632f77372f79360a5775455842724d436759422b4550767a595843314f712b6a36784446704e59345532507948723347624c5a6178704f2f655852504e672f3544457973535655560a694d767636466f4d4f544a72544130735a35576d4c7a33626c4d6b386357796c66417a646a453154625a304c44583578757146456362346e62576d655766654f0a30584e6e4844784b67366e37366547493666464b724e714c6268445834586d42456945416664454b4a75775454646e33584a2b496a673d3d0a2d2d2d2d2d454e44205253412050524956415445204b45592d2d2d2d2d0a

// clientDH = crypto.getDiffieHellman("modp15");
// clientDH.generateKeys();

// console.log(clientDH.getPrivateKey("hex"));
// // 6d89c07c652eff374fe8d68d344ab699bc55a67c480b3eae435961f7de2ef1ea6e3d9a9bc96a1a04491fb0c089fb905ae5d2588c4d1d45e17ce7dd9475c531c281af7766046a5755061e438d8287792d9fb7df15bed64b85078be3e34bb070d4190d0bdf2d28c40d456dc6950c61007181103a5761585e77775068fb9f430a25649c96621ceac38d01c37cba21a38e8f659a75fd91ae1382176c80601fd14f3dde45c55017c4e3019d16821aafb2f8441d99a1c6970c13f03ed93888461530f3387e0dcf0117c45d5b71b89f35e3921bed388f62be77aad21198d6d809e638d75c8dd1fa0ce867c739e43e61702e77697f5a85cff2b01e638fca7a8e7cbfe033f5f420a63c16ba00f675eb6c8c376b8396b54499b6abd2563ef5a81b4f7bd8df31d4c7ac1574d647a057e2c280e9e6dcf137ab71d6b4fc3ba1e8c417100306a66ad75d58ef5bc4aa0dbe2db30754cfc1ee29961750f45bb6dcf74a3351bcb6788b9cb07faa2fb7b9ca7edee4c9522d5bdde35a14a62e368419aea8577af9f114

// console.log(clientDH.getPublicKey("hex"));
// // 07a050f4e086f82df845084402144971c1e4aee7848fc0b777b70d8b282406d64da7442297260833b09e8cd993dd39b1f00da28c316773b548079e9a80f2342bff26e95fea9f79e67c8b47f4e7bc4fa8576c9b587d24fa9cb664fae4d08004775e461a4ae49353f6853a5872b2b645a53d8332ea8adbe928e0fad49cb6896506c7ff89799b14597c345ac65cdf79f455710dd7efc24c7c18e975860f16b2670770ce3718158af5884dd1131af006860a3756f6a8e7a673c55738c2a1e909f3a7a25f95f3484244df7e448c692ca801594f28de3874a7a424df3231ac6f4bca62158b8305b9b93c19fa1b4ae579b54d22a61ae538475474ecd8c8199a0491674a4df45936363f8786cc49590d3c979f317feb7901d7ad790e328317650276f8b1eb72a4faf2089f287560ca249db79746b3334c873760ecffd862a890b4a0924825d00c291b1054efd0b84b3f2e51c2358128085b6a94866783ce347c4ae26f1c181b74578c19657ae14e4fc560246d47c84722d30fb4333ff7615c9d4c6c0832

const sign = crypto.createSign("RSA-SHA256");
sign.write(
  "07a050f4e086f82df845084402144971c1e4aee7848fc0b777b70d8b282406d64da7442297260833b09e8cd993dd39b1f00da28c316773b548079e9a80f2342bff26e95fea9f79e67c8b47f4e7bc4fa8576c9b587d24fa9cb664fae4d08004775e461a4ae49353f6853a5872b2b645a53d8332ea8adbe928e0fad49cb6896506c7ff89799b14597c345ac65cdf79f455710dd7efc24c7c18e975860f16b2670770ce3718158af5884dd1131af006860a3756f6a8e7a673c55738c2a1e909f3a7a25f95f3484244df7e448c692ca801594f28de3874a7a424df3231ac6f4bca62158b8305b9b93c19fa1b4ae579b54d22a61ae538475474ecd8c8199a0491674a4df45936363f8786cc49590d3c979f317feb7901d7ad790e328317650276f8b1eb72a4faf2089f287560ca249db79746b3334c873760ecffd862a890b4a0924825d00c291b1054efd0b84b3f2e51c2358128085b6a94866783ce347c4ae26f1c181b74578c19657ae14e4fc560246d47c84722d30fb4333ff7615c9d4c6c0832"
);
sign.end();

const signature = sign.sign(
  `-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAw4Y3g5DyTnXh3QxrOvxq7U1HdGR6/5bg2fwr0D5LUyxS/XA8
vEG7rkZz9saxFxr/1/03Pfa5HsUAkkywzuu/Pwop4ql0AyEh+8xVTI0NYjFqdTi/
xLd5TUiHrvWIyDKJx92Ete2X0y8SE4j5rFUtsv62f7a8FfRJ2W/kd2DBRkIvwZWD
8J6rlHXGBIBV6r8f+kxcyARKriZOInrDFHmnT1led187Mj8hVe+0tfZZjoetO/wP
fuguCAj86FSzQsaWqDPbR5Fu7Xc5PpIMYPyNwm+w0+v0DBMUslAtA+Oc2PPf+AaN
UIoT/BUf79+MZegcxffWPrPsB8d1j5tf2X/+lQIDAQABAoIBAQCrXJB+8KRM+6fu
shmw4tVcEWTUr9PU+gkrQ4Wqx04BIVHC6YFxhTLWNM0htVYz5+ffBwBJgFkSjJpJ
nok/cQJ2X5QCIX2Z2IoOQzFnHCBktOaWwhvgbuUTRMQWJP+yZgi3cIAFaqyr3A89
q8kWrriUrgSIvkDuBOJMfXKA5f2+cmy56ojVGAxdZXQ3ryhjuiwqC8r74jsuzl3G
6rrXOfb5XCaysLQRtbMMGbkYPw0rlb7DV41FmEcuHaM9B6lNhP438DJNLMyOI3jj
cPmfKLyRfYfBopxO4EUq0JDeGI6q5c0Jzh6pW5ZqFloKdV0cgIAT0ccU29Q6Xy9U
vTJPvVapAoGBAPvXYoXJ71m3txGQzd6nPEDPxwn26fW4YeBYI9Qzo2DaLTRmbxFz
rgA8VehW6McGUlZ6xe7ihEEC91m5Mzrs+W9QPnPXq0HVs/PR9iJABuneXcHS6vQU
aYTfKqX/kxImeZgIJ5dXod4aD72GR0iTCOSyHn7bsBfQ1MWb06ygVLu7AoGBAMbA
wvDjiDUt/NGvRZu3xgMdeJAjKxOSTq6JIbfFud/cbUNA1ePm1RFwZsdFzJML1jLa
dpls88agKMNcSzQn6397DQ+FgrTbbteuMIzTY38+nhvl+aMfNgTVYFNG/BQgSWEa
VPY01aKChbofSmmOnpcbmtLgwE9OfgyqrKHz6wHvAoGASNq7Prb3Tf4OsL8yPzoj
/R/elaxfbF1Fu0/kNYwmtGsJbsI/WU4cxSavN4KE3qaehTQJNJ1E40XHZqZkAqTx
V9lf58U5XtdCssNHsArTtS5F8z9gBvIswGqK/PCdjD+jJ28cfPS19/mUGiDRWFZo
2TgKCGrnW0xncS8uIh9Tw+cCgYEAqWP6APH60VAba95Ulg1/ToJckYPXn7uPIYOw
X/69lwQ3fx0P7kd6in1gqy9a1mw9J2Q3tjU8Yql3dGEBmzb2p9SI4hSovFlUU6+a
ozs6TmVgvWg4ZYUhNedhTDhwePq3b3HQvXF0LifNrz4h3mr10NVvE5EHdc/w7/y6
WuEXBrMCgYB+EPvzYXC1Oq+j6xDFpNY4U2PyHr3GbLZaxpO/eXRPNg/5DEysSVUV
iMvv6FoMOTJrTA0sZ5WmLz3blMk8cWylfAzdjE1TbZ0LDX5xuqFEcb4nbWmeWfeO
0XNnHDxKg6n76eGI6fFKrNqLbhDX4XmBEiEAfdEKJuwTTdn3XJ+Ijg==
-----END RSA PRIVATE KEY-----`,
  "hex"
);

console.log(signature);

// const CryptoProvider = require("./CryptoProvider");

// const Ajv = require("ajv");
// const cbc_schema = require("./cbc.schema");
// const ajv = new Ajv();
// require("ajv-keywords")(ajv, ["instanceof"]);

// function addSchemas(schemas) {
//   for (const schema in schemas) {
//     ajv.addSchema(schemas[schema]);
//   }
// }

// function errorResponse(schemaErrors) {
//   const errors = schemaErrors.map(error => {
//     return {
//       path: error.dataPath,
//       message: error.message
//     };
//   });
//   return {
//     status: "failed",
//     errors: errors
//   };
// }

// addSchemas(cbc_schema);

// let cipherParams = {
//   key: "01234567890123450123456789012345",
//   iv: Buffer.alloc(16),
//   plaintext: "My cipher"
// };

// let valid = ajv.validate("cbc_encrypt", cipherParams);
// console.log(valid);
// if (!valid) {
//   const error = errorResponse(ajv.errors);
//   console.log(error);
// }

// let result = CryptoProvider.encrypt("CBC", cipherParams);
// console.log(result.iv, result.ciphertext);

// result = CryptoProvider.encrypt("CTR", cipherParams);
// console.log(result.ciphertext);

// cipherParams = {
//   key: "01234567890123450123456789012345",
//   iv: result.iv,
//   ciphertext: result.ciphertext
// };

// valid = ajv.validate("cbc_decrypt", cipherParams);
// console.log(valid);
// if (!valid) {
//   const error = errorResponse(ajv.errors);
//   console.log(error);
// }

// let cipherParams = {
//   key: "01234567890123450123456789012345",
//   iv: Buffer.alloc(16),
//   plaintext: ""
// };

// let result = CryptoProvider.encrypt("CBC", cipherParams);
// console.log(result.iv, result.ciphertext);

// result = CryptoProvider.decrypt("CBC", {
//   key: cipherParams.key,
//   iv: cipherParams.iv,
//   ciphertext: result.ciphertext,
//   padding: false
// });
// console.log(result);
